---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: influxdb
spec:
  replicas: 1
  selector:
    matchLabels:
      app: influxdb
  template:
    metadata:
      labels:
        app: influxdb
    spec:
      containers:
        - name: influxdb
          image: influxdb:1.8
          ports:
            - containerPort: 8086
          env:
            - name: INFLUXDB_DB
              value: "k6"
---
apiVersion: v1
kind: Service
metadata:
  name: influxdb
spec:
  selector:
    app: influxdb
  ports:
    - port: 8086
      targetPort: 8086
  type: LoadBalancer
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
data:
  datasource.yml: |-
    apiVersion: 1
    datasources:
      - name: InfluxDB
        type: influxdb
        url: http://influxdb:8086
        database: k6
        access: proxy
        isDefault: true
      - name: Prometheus
        type: prometheus
        url: http://prometheus:9090
        access: proxy
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
        - name: grafana
          image: grafana/grafana:8.5.21
          ports:
            - containerPort: 3000
          resources:
            limits:
              cpu: 200m
              memory: 200Mi
            requests:
              cpu: 100m
              memory: 100Mi
          volumeMounts:
            - mountPath: /etc/grafana/provisioning/datasources
              name: grafana-datasources
              readOnly: false
          env:
            - name: GF_AUTH_ANONYMOUS_ORG_ROLE
              value: "Admin"
            - name: GF_AUTH_ANONYMOUS_ENABLED
              value: "true"
            - name: GF_AUTH_BASIC_ENABLED
              value: "false"
            - name: GF_SERVER_SERVE_FROM_SUB_PATH
              value: "true"
      volumes:
        - name: grafana-datasources
          configMap:
            defaultMode: 420
            name: grafana-datasources
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
spec:
  selector:
    app: grafana
  type: LoadBalancer
  ports:
    - port: 3000
      targetPort: 3000
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
data:
  prometheus.yml: |
    global:
      scrape_interval: 5s

    scrape_configs:
      - job_name: 'prometheus'
        metrics_path: '/actuator/prometheus'
        static_configs:
          - targets: ['forwarder:8080', 'sender:8100']
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
        - name: prometheus
          image: prom/prometheus
          ports:
            - containerPort: 9090
          volumeMounts:
            - name: config-volume
              mountPath: /etc/prometheus/
      volumes:
        - name: config-volume
          configMap:
            name: prometheus-config
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
spec:
  selector:
    app: prometheus
  ports:
    - port: 9090
      targetPort: 9090
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: forwarder
spec:
  replicas: 1
  selector:
    matchLabels:
      app: forwarder
  template:
    metadata:
      labels:
        app: forwarder
    spec:
      containers:
        - name: forwarder
          image: geonc123/tis-forwarder-1:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          env:
            - name: SENDER_BASE_URL
              value: http://sender:8100
---
apiVersion: v1
kind: Service
metadata:
  name: forwarder
spec:
  selector:
    app: forwarder
  ports:
    - port: 8080
      targetPort: 8080
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sender
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sender
  template:
    metadata:
      labels:
        app: sender
    spec:
      containers:
        - name: sender
          image: geonc123/tis-sender:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: sender
spec:
  selector:
    app: sender
  ports:
    - port: 8100
      targetPort: 8080
  type: ClusterIP
